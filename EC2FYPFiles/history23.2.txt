#this function transforms a segment of the time series into a series of frequencies
#and compares the values within that segment to a threshhold
#takes three parameters, the first sample in the segment (the start), the last sample in the
#segment (the end) and the sample frequency
checkBin<-function(f,l,N){
#put data set into a variable (a vector)
z<-read.csv("~/Treasa1412Test2.txt", header=FALSE);
#get the third column of the vector and put in a variable
inputSignal<-z[3];
#get the chosen segment from the vector
segment<- inputSignal[f:l,];
#get the mean of the set of values
meanseg = mean(segment);
#subtract the mean from the segment (removing the offset)
segment = segment - meanseg;
#get the frequency values using the fft algorithm
fourierComponents = fft(segment);
#turn all values to positive values
fourierCoefficients = abs(fourierComponents);
#the output for greater than sample frequency/2 is redundant information
#divide the values by N/2
normalisedFourierComponents = fourierCoefficients/(N/2);
#put the first 50 values in a variable (only relevant for plotting)
mainCoeffs = normalisedFourierComponents[1:50];
#plot graph
plot(mainCoeffs);
#loop through values to check if the values(complex numbers) are above or below the threshhold
while(i<50){
#if the real part of the complex number is greater than the threshhold
#print "Over" to the console
if(Re(normalizedFourierComponents[i])>0.02){cat("Over");cat("\n")
#if cannot be evaluated
} else if (NA) {cat("Unknown");cat("\n")}
#if not, print "Under" to the console
else{cat("Under");cat("\n")}
#increment to next value
i=i+1;}}
f
}
#this function transforms a segment of the time series into a series of frequencies
#and compares the values within that segment to a threshhold
#takes three parameters, the first sample in the segment (the start), the last sample in the
#segment (the end) and the sample frequency
checkBin<-function(f,l,N){
#put data set into a variable (a vector)
z<-read.csv("~/Treasa1412Test2.txt", header=FALSE);
#get the third column of the vector and put in a variable
inputSignal<-z[3];
#get the chosen segment from the vector
segment<- inputSignal[f:l,];
#get the mean of the set of values
meanseg = mean(segment);
#subtract the mean from the segment (removing the offset)
segment = segment - meanseg;
#get the frequency values using the fft algorithm
fourierComponents = fft(segment);
#turn all values to positive values
fourierCoefficients = abs(fourierComponents);
#the output for greater than sample frequency/2 is redundant information
#divide the values by N/2
normalisedFourierComponents = fourierCoefficients/(N/2);
#put the first 50 values in a variable (only relevant for plotting)
mainCoeffs = normalisedFourierComponents[1:50];
#plot graph
plot(mainCoeffs);
#loop through values to check if the values(complex numbers) are above or below the threshhold
while(i<50){
#if the real part of the complex number is greater than the threshhold
#print "Over" to the console
if(Re(normalizedFourierComponents[i])>0.02){cat("Over");cat("\n")
#if cannot be evaluated
} else if (NA) {cat("Unknown");cat("\n")}
#if not, print "Under" to the console
else{cat("Under");cat("\n")}
#increment to next value
i=i+1;}}
checkBin(1,50,5)
#this function transforms a segment of the time series into a series of frequencies
#and compares the values within that segment to a threshhold
#takes three parameters, the first sample in the segment (the start), the last sample in the
#segment (the end) and the sample frequency
checkBin<-function(f,l,N){
#put data set into a variable (a vector)
z<-read.csv("~/Treasa1412Test2.txt", header=FALSE);
#get the third column of the vector and put in a variable
inputSignal<-z[3];
#get the chosen segment from the vector
segment<- inputSignal[f:l,];
#get the mean of the set of values
meanseg = mean(segment);
#subtract the mean from the segment (removing the offset)
segment = segment - meanseg;
#get the frequency values using the fft algorithm
fourierComponents = fft(segment);
#turn all values to positive values
fourierCoefficients = abs(fourierComponents);
#the output for greater than sample frequency/2 is redundant information
#divide the values by N/2
normalisedFourierComponents = fourierCoefficients/(N/2);
#put the first 50 values in a variable (only relevant for plotting)
mainCoeffs = normalisedFourierComponents[1:50];
#plot graph
plot(mainCoeffs);
#loop through values to check if the values(complex numbers) are above or below the threshhold
while(i<50){
#if the real part of the complex number is greater than the threshhold
#print "Over" to the console
if(Re(normalizedFourierComponents[i])>0.02){cat("Over");cat("\n")
#if cannot be evaluated
} else if (is.na(normalizedFourierComponents[i])) {cat("Unknown");cat("\n")}
#if not, print "Under" to the console
else{cat("Under");cat("\n")}
#increment to next value
i=i+1;}}
checkBin(1,50,5)
else{cat("Under");cat("\n")}
} else if (Re(normalizedFourierComponents[i])>0.02){cat("Over");cat("\n")}
} else{cat("Under");cat("\n")}
i=i+1;}}
i=i+1;}
}}
}
}
#put the first 25 values in a variable (only relevant for plotting)
#this function transforms a segment of the time series into a series of frequencies
#and compares the values within that segment to a threshhold
#takes three parameters, the first sample in the segment (the start), the last sample in the
#segment (the end) and the sample frequency
checkBin<-function(f,l,N){
#put data set into a variable (a vector)
z<-read.csv("~/Treasa1412Test2.txt", header=FALSE);
#get the third column of the vector and put in a variable
inputSignal<-z[3];
#get the chosen segment from the vector
segment<- inputSignal[f:l,];
#get the mean of the set of values
meanseg = mean(segment);
#subtract the mean from the segment (removing the offset)
segment = segment - meanseg;
#get the frequency values using the fft algorithm
fourierComponents = fft(segment);
#turn all values to positive values
fourierCoefficients = abs(fourierComponents);
#the output for greater than sample frequency/2 is redundant information
#divide the values by N/2
normalisedFourierComponents = fourierCoefficients/(N/2);
#put the first 25 values in a variable (only relevant for plotting)
mainCoeffs = normalisedFourierComponents[1:25];
#plot graph
plot(mainCoeffs);
#loop through values to check if the values(complex numbers) are above or below the threshhold
while(i<50){
#if cannot be evaluated
if(is.na(normalizedFourierComponents[i])) {cat("Unknown");cat("\n")
#if the real part of the complex number is greater than the threshhold
#print "Over" to the console
} else if (Re(normalizedFourierComponents[i])>0.02){cat("Over");cat("\n")
#if not, print "Under" to the console
} else{cat("Under");cat("\n")
}
#increment to next value
i=i+1;
}
}
checkBin(1,50,5)
checkBin(51,100,5)
checkBin(101,150,5)
checkBin(151,200,5)
checkBin(101,150,5)
checkBin(101,150,5)
checkBin(51,100,5)
checkBin(1,50,5)
checkBin(151,200,5)
checkBin(201,250,5)
checkBin(151,200,5)
#this function transforms a segment of the time series into a series of frequencies
#and compares the values within that segment to a threshhold
#takes three parameters, the first sample in the segment (the start), the last sample in the
#segment (the end) and the sample frequency
checkBin<-function(f,l,N){
#put data set into a variable (a vector)
z<-read.csv("~/Treasa1412Test2.txt", header=FALSE);
#get the third column of the vector and put in a variable
inputSignal<-z[3];
#get the chosen segment from the vector
segment<- inputSignal[f:l,];
#get the mean of the set of values
meanseg = mean(segment);
#subtract the mean from the segment (removing the offset)
segment = segment - meanseg;
#get the frequency values using the fft algorithm
fourierComponents = fft(segment);
#turn all values to positive values
fourierCoefficients = abs(fourierComponents);
#the output for greater than sample frequency/2 is redundant information
#divide the values by N/2
normalisedFourierComponents = fourierCoefficients/(N/2);
#put the first 25 values in a variable (only relevant for plotting)
mainCoeffs = normalisedFourierComponents[1:25];
#plot graph
plot(mainCoeffs, ylim=c(0,000, 0.10));
#loop through values to check if the values(complex numbers) are above or below the threshhold
while(i<50){
#if cannot be evaluated
if(is.na(normalizedFourierComponents[i])) {cat("Unknown");cat("\n")
#if the real part of the complex number is greater than the threshhold
#print "Over" to the console
} else if (Re(normalizedFourierComponents[i])>0.02){cat("Over");cat("\n")
#if not, print "Under" to the console
} else{cat("Under");cat("\n")
}
#increment to next value
i=i+1;
}
}
checkBin(151,200,5)
#this function transforms a segment of the time series into a series of frequencies
#and compares the values within that segment to a threshhold
#takes three parameters, the first sample in the segment (the start), the last sample in the
#segment (the end) and the sample frequency
checkBin<-function(f,l,N){
#put data set into a variable (a vector)
z<-read.csv("~/Treasa1412Test2.txt", header=FALSE);
#get the third column of the vector and put in a variable
inputSignal<-z[3];
#get the chosen segment from the vector
segment<- inputSignal[f:l,];
#get the mean of the set of values
meanseg = mean(segment);
#subtract the mean from the segment (removing the offset)
segment = segment - meanseg;
#get the frequency values using the fft algorithm
fourierComponents = fft(segment);
#turn all values to positive values
fourierCoefficients = abs(fourierComponents);
#the output for greater than sample frequency/2 is redundant information
#divide the values by N/2
normalisedFourierComponents = fourierCoefficients/(N/2);
#put the first 25 values in a variable (only relevant for plotting)
mainCoeffs = normalisedFourierComponents[1:25];
#plot graph
plot(mainCoeffs, ylim=c(0.000, 0.10));
#loop through values to check if the values(complex numbers) are above or below the threshhold
while(i<50){
#if cannot be evaluated
if(is.na(normalizedFourierComponents[i])) {cat("Unknown");cat("\n")
#if the real part of the complex number is greater than the threshhold
#print "Over" to the console
} else if (Re(normalizedFourierComponents[i])>0.02){cat("Over");cat("\n")
#if not, print "Under" to the console
} else{cat("Under");cat("\n")
}
#increment to next value
i=i+1;
}
}
checkBin(151,200,5)
checkBin(201,250,5)
checkBin(1,50,5)
checkBin(51,100,5)
checkBin(1,50,5)
checkBin(201,250,5)
z<-read.csv("~/Treasa1412Test2.txt", header=FALSE);
inputSignal<-z[3];
l<-length(inputSignal);
View(l);
length(inputSignal);
nrow(inputSignal);
z<-read.csv("~/Treasa1412Test2.txt", header=FALSE);
inputSignal<-z[3];
rows<-nrow(inputSignal);
plot(inputSignal, rows);
z<-read.csv("~/Treasa1412Test2.txt", header=FALSE);
inputSignal<-z[3];
x<-inputSignal[1:rows];
rows<-nrow(inputSignal);
plot(rows, x);
periodogram(inputSignal);
z<-read.csv("~/Treasa1412Test2.txt", header=FALSE);
input<-z[3];
rows<-nrow(input);
plot(rows, input);
periodogram(input);
plot(rows, input);
plot.ts(input);
checkBin(1,50, 5);
plot.ts(input);
checkBin(51,100, 5);
plot.ts(input);
checkBin(100,150, 5);
plot.ts(input);
checkBin(150,200, 5);
plot.ts(input);
checkBin(200, 250, 5);
plot.ts(input);
checkBin(250, 300, 5);
plot.ts(input);
#this function transforms a segment of the time series into a series of frequencies
#and compares the values within that segment to a threshhold
#takes three parameters, the first sample in the segment (the start), the last sample in the
#segment (the end) and the sample frequency
checkBin<-function(f,l,N){
#put data set into a variable (a vector)
z<-read.csv("~/Treasa1412Test2.txt", header=FALSE);
#get the third column of the vector and put in a variable
inputSignal<-z[3];
#get the chosen segment from the vector
segment<- inputSignal[f:l,];
#get the mean of the set of values
meanseg = mean(segment);
#subtract the mean from the segment (removing the offset)
segment = segment - meanseg;
#get the frequency values using the fft algorithm
fourierComponents = fft(segment);
#turn all values to positive values
fourierCoefficients = abs(fourierComponents);
#the output for greater than sample frequency/2 is redundant information
#divide the values by N/2
normalisedFourierComponents = fourierCoefficients/(N/2);
#put the first 25 values in a variable (only relevant for plotting)
mainCoeffs = normalisedFourierComponents[1:(f-l)/2];
#plot graph
plot(mainCoeffs, ylim=c(0.000, 0.10));
#loop through values to check if the values(complex numbers) are above or below the threshhold
while(i<50){
#if cannot be evaluated
if(is.na(normalizedFourierComponents[i])) {cat("Unknown");cat("\n")
#if the real part of the complex number is greater than the threshhold
#print "Over" to the console
} else if (Re(normalizedFourierComponents[i])>0.02){cat("Over");cat("\n")
#if not, print "Under" to the console
} else{cat("Under");cat("\n")
}
#increment to next value
i=i+1;
}
}
checkBin(250, 300, 5);
#this function transforms a segment of the time series into a series of frequencies
#and compares the values within that segment to a threshhold
#takes three parameters, the first sample in the segment (the start), the last sample in the
#segment (the end) and the sample frequency
checkBin<-function(f,l,N){
#put data set into a variable (a vector)
z<-read.csv("~/Treasa1412Test2.txt", header=FALSE);
#get the third column of the vector and put in a variable
inputSignal<-z[3];
#get the chosen segment from the vector
segment<- inputSignal[f:l,];
#get the mean of the set of values
meanseg = mean(segment);
#subtract the mean from the segment (removing the offset)
segment = segment - meanseg;
#get the frequency values using the fft algorithm
fourierComponents = fft(segment);
#turn all values to positive values
fourierCoefficients = abs(fourierComponents);
#the output for greater than sample frequency/2 is redundant information
#divide the values by N/2
normalisedFourierComponents = fourierCoefficients/(N/2);
#put the first 25 values in a variable (only relevant for plotting)
mainCoeffs = normalisedFourierComponents[1:(l-f)/2];
#plot graph
plot(mainCoeffs, ylim=c(0.000, 0.10));
#loop through values to check if the values(complex numbers) are above or below the threshhold
while(i<50){
#if cannot be evaluated
if(is.na(normalizedFourierComponents[i])) {cat("Unknown");cat("\n")
#if the real part of the complex number is greater than the threshhold
#print "Over" to the console
} else if (Re(normalizedFourierComponents[i])>0.02){cat("Over");cat("\n")
#if not, print "Under" to the console
} else{cat("Under");cat("\n")
}
#increment to next value
i=i+1;
}
}
checkBin(250, 300, 5);
plot.ts(input);
checkBin(60, 120, 5);
plot.ts(input);
checkBin(140, 210, 5);
#this function transforms a segment of the time series into a series of frequencies
#and compares the values within that segment to a threshhold
#takes three parameters, the first sample in the segment (the start), the last sample in the
#segment (the end) and the sample frequency
checkBin<-function(f,l,N){
#put data set into a variable (a vector)
z<-read.csv("~/Treasa1412Test2.txt", header=FALSE);
#get the third column of the vector and put in a variable
inputSignal<-z[3];
#get the chosen segment from the vector
segment<- inputSignal[f:l,];
#get the mean of the set of values
meanseg = mean(segment);
#subtract the mean from the segment (removing the offset)
segment = segment - meanseg;
#get the frequency values using the fft algorithm
fourierComponents = fft(segment);
#turn all values to positive values
fourierCoefficients = abs(fourierComponents);
#the output for greater than sample frequency/2 is redundant information
#divide the values by N/2
normalisedFourierComponents = fourierCoefficients/(N/2);
#put the first 25 values in a variable (only relevant for plotting)
mainCoeffs = normalisedFourierComponents[1:(l-f)/2];
#plot graph
plot(mainCoeffs, xlim=c(0.0, 0.25), ylim=c(0.000, 0.10));
#loop through values to check if the values(complex numbers) are above or below the threshhold
while(i<50){
#if cannot be evaluated
if(is.na(normalizedFourierComponents[i])) {cat("Unknown");cat("\n")
#if the real part of the complex number is greater than the threshhold
#print "Over" to the console
} else if (Re(normalizedFourierComponents[i])>0.02){cat("Over");cat("\n")
#if not, print "Under" to the console
} else{cat("Under");cat("\n")
}
#increment to next value
i=i+1;
}
}
checkBin(140, 210, 5);
#this function transforms a segment of the time series into a series of frequencies
#and compares the values within that segment to a threshhold
#takes three parameters, the first sample in the segment (the start), the last sample in the
#segment (the end) and the sample frequency
checkBin<-function(f,l,N){
#put data set into a variable (a vector)
z<-read.csv("~/Treasa1412Test2.txt", header=FALSE);
#get the third column of the vector and put in a variable
inputSignal<-z[3];
#get the chosen segment from the vector
segment<- inputSignal[f:l,];
#get the mean of the set of values
meanseg = mean(segment);
#subtract the mean from the segment (removing the offset)
segment = segment - meanseg;
#get the frequency values using the fft algorithm
fourierComponents = fft(segment);
#turn all values to positive values
fourierCoefficients = abs(fourierComponents);
#the output for greater than sample frequency/2 is redundant information
#divide the values by N/2
normalisedFourierComponents = fourierCoefficients/(N/2);
#put the first 25 values in a variable (only relevant for plotting)
mainCoeffs = normalisedFourierComponents[1:(l-f)/2];
#plot graph
plot(mainCoeffs, ylim=c(0.000, 0.10));
#loop through values to check if the values(complex numbers) are above or below the threshhold
while(i<50){
#if cannot be evaluated
if(is.na(normalizedFourierComponents[i])) {cat("Unknown");cat("\n")
#if the real part of the complex number is greater than the threshhold
#print "Over" to the console
} else if (Re(normalizedFourierComponents[i])>0.02){cat("Over");cat("\n")
#if not, print "Under" to the console
} else{cat("Under");cat("\n")
}
#increment to next value
i=i+1;
}
}
checkBin(140, 210, 5);
plot.ts(input);
checkBin(10, 60, 5);
#this function transforms a segment of the time series into a series of frequencies
#and compares the values within that segment to a threshhold
#takes three parameters, the first sample in the segment (the start), the last sample in the
#segment (the end) and the sample frequency
checkBin<-function(f,l,N){
#put data set into a variable (a vector)
z<-read.csv("~/Treasa1412Test2.txt", header=FALSE);
#get the third column of the vector and put in a variable
inputSignal<-z[3];
#get the chosen segment from the vector
segment<- inputSignal[f:l,];
#get the mean of the set of values
meanseg = mean(segment);
#subtract the mean from the segment (removing the offset)
segment = segment - meanseg;
#get the frequency values using the fft algorithm
fourierComponents = fft(segment);
#turn all values to positive values
fourierCoefficients = abs(fourierComponents);
#the output for greater than sample frequency/2 is redundant information
#divide the values by N/2
normalisedFourierComponents = fourierCoefficients/(N/2);
#put the first 25 values in a variable (only relevant for plotting)
mainCoeffs = normalisedFourierComponents[1:((l-f)/2)];
#plot graph
plot(mainCoeffs, ylim=c(0.000, 0.10));
#loop through values to check if the values(complex numbers) are above or below the threshhold
while(i<50){
#if cannot be evaluated
if(is.na(normalizedFourierComponents[i])) {cat("Unknown");cat("\n")
#if the real part of the complex number is greater than the threshhold
#print "Over" to the console
} else if (Re(normalizedFourierComponents[i])>0.02){cat("Over");cat("\n")
#if not, print "Under" to the console
} else{cat("Under");cat("\n")
}
#increment to next value
i=i+1;
}
}
checkBin(10, 60, 5);
checkBin(140, 210, 5);
plot.ts(input);
checkBin(60, 120, 5);
savehistory("~/history23.2.txt")
